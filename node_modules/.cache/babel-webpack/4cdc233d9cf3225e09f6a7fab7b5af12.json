{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Pipe, Directive, Input, Output, Component, ChangeDetectionStrategy, ViewEncapsulation, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nfunction PaginationControlsComponent_ul_3_li_1_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_1_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext(3);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return _r0.previous();\n    })(\"click\", function PaginationControlsComponent_ul_3_li_1_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r8);\n      i0.ɵɵnextContext(3);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return _r0.previous();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r5.previousLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r5.screenReaderPageLabel);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_1_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r6.previousLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r6.screenReaderPageLabel);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 9);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_1_a_1_Template, 4, 2, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_1_span_2_Template, 4, 2, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵclassProp(\"disabled\", _r0.isFirstPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", 1 < _r0.getCurrent());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.isFirstPage());\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_4_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r15 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_4_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const page_r10 = i0.ɵɵnextContext().$implicit;\n      i0.ɵɵnextContext(2);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return _r0.setCurrent(page_r10.value);\n    })(\"click\", function PaginationControlsComponent_ul_3_li_4_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r15);\n      const page_r10 = i0.ɵɵnextContext().$implicit;\n      i0.ɵɵnextContext(2);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return _r0.setCurrent(page_r10.value);\n    });\n    i0.ɵɵelementStart(1, \"span\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\");\n    i0.ɵɵtext(4);\n    i0.ɵɵpipe(5, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const page_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r11 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r11.screenReaderPageLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(page_r10.label === \"...\" ? page_r10.label : i0.ɵɵpipeBind2(5, 2, page_r10.label, \"\"));\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_4_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵelementStart(1, \"span\", 16);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"span\");\n    i0.ɵɵtext(5);\n    i0.ɵɵpipe(6, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const page_r10 = i0.ɵɵnextContext().$implicit;\n    const ctx_r12 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate1(\"\", ctx_r12.screenReaderCurrentLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(page_r10.label === \"...\" ? page_r10.label : i0.ɵɵpipeBind2(6, 2, page_r10.label, \"\"));\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_4_a_1_Template, 6, 5, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_4_ng_container_2_Template, 7, 5, \"ng-container\", 15);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const page_r10 = ctx.$implicit;\n    i0.ɵɵnextContext(2);\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵclassProp(\"current\", _r0.getCurrent() === page_r10.value)(\"ellipsis\", page_r10.label === \"...\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.getCurrent() !== page_r10.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.getCurrent() === page_r10.value);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_5_a_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r23 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"a\", 12);\n    i0.ɵɵlistener(\"keyup.enter\", function PaginationControlsComponent_ul_3_li_5_a_1_Template_a_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      i0.ɵɵnextContext(3);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return _r0.next();\n    })(\"click\", function PaginationControlsComponent_ul_3_li_5_a_1_Template_a_click_0_listener() {\n      i0.ɵɵrestoreView(_r23);\n      i0.ɵɵnextContext(3);\n\n      const _r0 = i0.ɵɵreference(1);\n\n      return _r0.next();\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r20 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r20.nextLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r20.screenReaderPageLabel);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_5_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementStart(2, \"span\", 13);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r21 = i0.ɵɵnextContext(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r21.nextLabel, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r21.screenReaderPageLabel);\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_li_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\", 17);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_5_a_1_Template, 4, 2, \"a\", 10);\n    i0.ɵɵtemplate(2, PaginationControlsComponent_ul_3_li_5_span_2_Template, 4, 2, \"span\", 11);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵnextContext(2);\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵclassProp(\"disabled\", _r0.isLastPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", !_r0.isLastPage());\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", _r0.isLastPage());\n  }\n}\n\nfunction PaginationControlsComponent_ul_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\", 4);\n    i0.ɵɵtemplate(1, PaginationControlsComponent_ul_3_li_1_Template, 3, 4, \"li\", 5);\n    i0.ɵɵelementStart(2, \"li\", 6);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(4, PaginationControlsComponent_ul_3_li_4_Template, 3, 6, \"li\", 7);\n    i0.ɵɵtemplate(5, PaginationControlsComponent_ul_3_li_5_Template, 3, 4, \"li\", 8);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n\n    const _r0 = i0.ɵɵreference(1);\n\n    i0.ɵɵclassProp(\"responsive\", ctx_r1.responsive);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.directionLinks);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate2(\" \", _r0.getCurrent(), \" / \", _r0.getLastPage(), \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", _r0.pages)(\"ngForTrackBy\", ctx_r1.trackByIndex);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.directionLinks);\n  }\n}\n\nclass PaginationService {\n  constructor() {\n    this.change = new EventEmitter();\n    this.instances = {};\n    this.DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\n  }\n\n  defaultId() {\n    return this.DEFAULT_ID;\n  }\n  /**\r\n   * Register a PaginationInstance with this service. Returns a\r\n   * boolean value signifying whether the instance is new or\r\n   * updated (true = new or updated, false = unchanged).\r\n   */\n\n\n  register(instance) {\n    if (instance.id == null) {\n      instance.id = this.DEFAULT_ID;\n    }\n\n    if (!this.instances[instance.id]) {\n      this.instances[instance.id] = instance;\n      return true;\n    } else {\n      return this.updateInstance(instance);\n    }\n  }\n  /**\r\n   * Check each property of the instance and update any that have changed. Return\r\n   * true if any changes were made, else return false.\r\n   */\n\n\n  updateInstance(instance) {\n    let changed = false;\n\n    for (let prop in this.instances[instance.id]) {\n      if (instance[prop] !== this.instances[instance.id][prop]) {\n        this.instances[instance.id][prop] = instance[prop];\n        changed = true;\n      }\n    }\n\n    return changed;\n  }\n  /**\r\n   * Returns the current page number.\r\n   */\n\n\n  getCurrentPage(id) {\n    if (this.instances[id]) {\n      return this.instances[id].currentPage;\n    }\n\n    return 1;\n  }\n  /**\r\n   * Sets the current page number.\r\n   */\n\n\n  setCurrentPage(id, page) {\n    if (this.instances[id]) {\n      let instance = this.instances[id];\n      let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n      if (page <= maxPage && 1 <= page) {\n        this.instances[id].currentPage = page;\n        this.change.emit(id);\n      }\n    }\n  }\n  /**\r\n   * Sets the value of instance.totalItems\r\n   */\n\n\n  setTotalItems(id, totalItems) {\n    if (this.instances[id] && 0 <= totalItems) {\n      this.instances[id].totalItems = totalItems;\n      this.change.emit(id);\n    }\n  }\n  /**\r\n   * Sets the value of instance.itemsPerPage.\r\n   */\n\n\n  setItemsPerPage(id, itemsPerPage) {\n    if (this.instances[id]) {\n      this.instances[id].itemsPerPage = itemsPerPage;\n      this.change.emit(id);\n    }\n  }\n  /**\r\n   * Returns a clone of the pagination instance object matching the id. If no\r\n   * id specified, returns the instance corresponding to the default id.\r\n   */\n\n\n  getInstance(id = this.DEFAULT_ID) {\n    if (this.instances[id]) {\n      return this.clone(this.instances[id]);\n    }\n\n    return {};\n  }\n  /**\r\n   * Perform a shallow clone of an object.\r\n   */\n\n\n  clone(obj) {\n    var target = {};\n\n    for (var i in obj) {\n      if (obj.hasOwnProperty(i)) {\n        target[i] = obj[i];\n      }\n    }\n\n    return target;\n  }\n\n}\n\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\n\nclass PaginatePipe {\n  constructor(service) {\n    this.service = service; // store the values from the last time the pipe was invoked\n\n    this.state = {};\n  }\n\n  transform(collection, args) {\n    // When an observable is passed through the AsyncPipe, it will output\n    // `null` until the subscription resolves. In this case, we want to\n    // use the cached data from the `state` object to prevent the NgFor\n    // from flashing empty until the real values arrive.\n    if (!(collection instanceof Array)) {\n      let _id = args.id || this.service.defaultId();\n\n      if (this.state[_id]) {\n        return this.state[_id].slice;\n      } else {\n        return collection;\n      }\n    }\n\n    let serverSideMode = args.totalItems && args.totalItems !== collection.length;\n    let instance = this.createInstance(collection, args);\n    let id = instance.id;\n    let start, end;\n    let perPage = instance.itemsPerPage;\n    let emitChange = this.service.register(instance);\n\n    if (!serverSideMode && collection instanceof Array) {\n      perPage = +perPage || LARGE_NUMBER;\n      start = (instance.currentPage - 1) * perPage;\n      end = start + perPage;\n      let isIdentical = this.stateIsIdentical(id, collection, start, end);\n\n      if (isIdentical) {\n        return this.state[id].slice;\n      } else {\n        let slice = collection.slice(start, end);\n        this.saveState(id, collection, slice, start, end);\n        this.service.change.emit(id);\n        return slice;\n      }\n    } else {\n      if (emitChange) {\n        this.service.change.emit(id);\n      } // save the state for server-side collection to avoid null\n      // flash as new data loads.\n\n\n      this.saveState(id, collection, collection, start, end);\n      return collection;\n    }\n  }\n  /**\r\n   * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n   */\n\n\n  createInstance(collection, config) {\n    this.checkConfig(config);\n    return {\n      id: config.id != null ? config.id : this.service.defaultId(),\n      itemsPerPage: +config.itemsPerPage || 0,\n      currentPage: +config.currentPage || 1,\n      totalItems: +config.totalItems || collection.length\n    };\n  }\n  /**\r\n   * Ensure the argument passed to the filter contains the required properties.\r\n   */\n\n\n  checkConfig(config) {\n    const required = ['itemsPerPage', 'currentPage'];\n    const missing = required.filter(prop => !(prop in config));\n\n    if (0 < missing.length) {\n      throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\n    }\n  }\n  /**\r\n   * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n   * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n   * need to check that the collection, start and end points are all identical, and if so, return the\r\n   * last sliced array.\r\n   */\n\n\n  saveState(id, collection, slice, start, end) {\n    this.state[id] = {\n      collection,\n      size: collection.length,\n      slice,\n      start,\n      end\n    };\n  }\n  /**\r\n   * For a given id, returns true if the collection, size, start and end values are identical.\r\n   */\n\n\n  stateIsIdentical(id, collection, start, end) {\n    let state = this.state[id];\n\n    if (!state) {\n      return false;\n    }\n\n    let isMetaDataIdentical = state.size === collection.length && state.start === start && state.end === end;\n\n    if (!isMetaDataIdentical) {\n      return false;\n    }\n\n    return state.slice.every((element, index) => element === collection[start + index]);\n  }\n\n}\n\nPaginatePipe.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: PaginatePipe,\n  deps: [{\n    token: PaginationService\n  }],\n  target: i0.ɵɵFactoryTarget.Pipe\n});\nPaginatePipe.ɵpipe = i0.ɵɵdefinePipe({\n  name: \"paginate\",\n  type: PaginatePipe,\n  pure: false\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: PaginatePipe,\n  decorators: [{\n    type: Pipe,\n    args: [{\n      name: 'paginate',\n      pure: false\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: PaginationService\n    }];\n  }\n});\n/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\n\nconst DEFAULT_TEMPLATE = `\n    <pagination-template  #p=\"paginationApi\"\n                         [id]=\"id\"\n                         [maxSize]=\"maxSize\"\n                         (pageChange)=\"pageChange.emit($event)\"\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\n    <ul class=\"ngx-pagination\" \n        [class.responsive]=\"responsive\"\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\n\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li> \n\n        <li class=\"small-screen\">\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\n        </li>\n\n        <li [class.current]=\"p.getCurrent() === page.value\" \n            [class.ellipsis]=\"page.label === '...'\"\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\n            </a>\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\n              <span aria-live=\"polite\">\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \n              </span>\n            </ng-container>\n        </li>\n\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </a>\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\n            </span>\n        </li>\n\n    </ul>\n    </nav>\n    </pagination-template>\n    `;\nconst DEFAULT_STYLES = `\n.ngx-pagination {\n  margin-left: 0;\n  margin-bottom: 1rem; }\n  .ngx-pagination::before, .ngx-pagination::after {\n    content: ' ';\n    display: table; }\n  .ngx-pagination::after {\n    clear: both; }\n  .ngx-pagination li {\n    -moz-user-select: none;\n    -webkit-user-select: none;\n    -ms-user-select: none;\n    margin-right: 0.0625rem;\n    border-radius: 0; }\n  .ngx-pagination li {\n    display: inline-block; }\n  .ngx-pagination a,\n  .ngx-pagination button {\n    color: #0a0a0a; \n    display: block;\n    padding: 0.1875rem 0.625rem;\n    border-radius: 0; }\n    .ngx-pagination a:hover,\n    .ngx-pagination button:hover {\n      background: #e6e6e6; }\n  .ngx-pagination .current {\n    padding: 0.1875rem 0.625rem;\n    background: #2199e8;\n    color: #fefefe;\n    cursor: default; }\n  .ngx-pagination .disabled {\n    padding: 0.1875rem 0.625rem;\n    color: #cacaca;\n    cursor: default; } \n    .ngx-pagination .disabled:hover {\n      background: transparent; }\n  .ngx-pagination a, .ngx-pagination button {\n    cursor: pointer; }\n\n.ngx-pagination .pagination-previous a::before,\n.ngx-pagination .pagination-previous.disabled::before { \n  content: '«';\n  display: inline-block;\n  margin-right: 0.5rem; }\n\n.ngx-pagination .pagination-next a::after,\n.ngx-pagination .pagination-next.disabled::after {\n  content: '»';\n  display: inline-block;\n  margin-left: 0.5rem; }\n\n.ngx-pagination .show-for-sr {\n  position: absolute !important;\n  width: 1px;\n  height: 1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0); }\n.ngx-pagination .small-screen {\n  display: none; }\n@media screen and (max-width: 601px) {\n  .ngx-pagination.responsive .small-screen {\n    display: inline-block; } \n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\n    display: none; }\n}\n  `;\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\n\nclass PaginationControlsDirective {\n  constructor(service, changeDetectorRef) {\n    this.service = service;\n    this.changeDetectorRef = changeDetectorRef;\n    this.maxSize = 7;\n    this.pageChange = new EventEmitter();\n    this.pageBoundsCorrection = new EventEmitter();\n    this.pages = [];\n    this.changeSub = this.service.change.subscribe(id => {\n      if (this.id === id) {\n        this.updatePageLinks();\n        this.changeDetectorRef.markForCheck();\n        this.changeDetectorRef.detectChanges();\n      }\n    });\n  }\n\n  ngOnInit() {\n    if (this.id === undefined) {\n      this.id = this.service.defaultId();\n    }\n\n    this.updatePageLinks();\n  }\n\n  ngOnChanges(changes) {\n    this.updatePageLinks();\n  }\n\n  ngOnDestroy() {\n    this.changeSub.unsubscribe();\n  }\n  /**\r\n   * Go to the previous page\r\n   */\n\n\n  previous() {\n    this.checkValidId();\n    this.setCurrent(this.getCurrent() - 1);\n  }\n  /**\r\n   * Go to the next page\r\n   */\n\n\n  next() {\n    this.checkValidId();\n    this.setCurrent(this.getCurrent() + 1);\n  }\n  /**\r\n   * Returns true if current page is first page\r\n   */\n\n\n  isFirstPage() {\n    return this.getCurrent() === 1;\n  }\n  /**\r\n   * Returns true if current page is last page\r\n   */\n\n\n  isLastPage() {\n    return this.getLastPage() === this.getCurrent();\n  }\n  /**\r\n   * Set the current page number.\r\n   */\n\n\n  setCurrent(page) {\n    this.pageChange.emit(page);\n  }\n  /**\r\n   * Get the current page number.\r\n   */\n\n\n  getCurrent() {\n    return this.service.getCurrentPage(this.id);\n  }\n  /**\r\n   * Returns the last page number\r\n   */\n\n\n  getLastPage() {\n    let inst = this.service.getInstance(this.id);\n\n    if (inst.totalItems < 1) {\n      // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\n      // but it makes sense to consider a single, empty page as the last page.\n      return 1;\n    }\n\n    return Math.ceil(inst.totalItems / inst.itemsPerPage);\n  }\n\n  getTotalItems() {\n    return this.service.getInstance(this.id).totalItems;\n  }\n\n  checkValidId() {\n    if (this.service.getInstance(this.id).id == null) {\n      console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\n    }\n  }\n  /**\r\n   * Updates the page links and checks that the current page is valid. Should run whenever the\r\n   * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n   * input values changes.\r\n   */\n\n\n  updatePageLinks() {\n    let inst = this.service.getInstance(this.id);\n    const correctedCurrentPage = this.outOfBoundCorrection(inst);\n\n    if (correctedCurrentPage !== inst.currentPage) {\n      setTimeout(() => {\n        this.pageBoundsCorrection.emit(correctedCurrentPage);\n        this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n      });\n    } else {\n      this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\n    }\n  }\n  /**\r\n   * Checks that the instance.currentPage property is within bounds for the current page range.\r\n   * If not, return a correct value for currentPage, or the current value if OK.\r\n   */\n\n\n  outOfBoundCorrection(instance) {\n    const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\n\n    if (totalPages < instance.currentPage && 0 < totalPages) {\n      return totalPages;\n    } else if (instance.currentPage < 1) {\n      return 1;\n    }\n\n    return instance.currentPage;\n  }\n  /**\r\n   * Returns an array of Page objects to use in the pagination controls.\r\n   */\n\n\n  createPageArray(currentPage, itemsPerPage, totalItems, paginationRange) {\n    // paginationRange could be a string if passed from attribute, so cast to number.\n    paginationRange = +paginationRange;\n    let pages = []; // Return 1 as default page number\n    // Make sense to show 1 instead of empty when there are no items\n\n    const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\n    const halfWay = Math.ceil(paginationRange / 2);\n    const isStart = currentPage <= halfWay;\n    const isEnd = totalPages - halfWay < currentPage;\n    const isMiddle = !isStart && !isEnd;\n    let ellipsesNeeded = paginationRange < totalPages;\n    let i = 1;\n\n    while (i <= totalPages && i <= paginationRange) {\n      let label;\n      let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\n      let openingEllipsesNeeded = i === 2 && (isMiddle || isEnd);\n      let closingEllipsesNeeded = i === paginationRange - 1 && (isMiddle || isStart);\n\n      if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\n        label = '...';\n      } else {\n        label = pageNumber;\n      }\n\n      pages.push({\n        label: label,\n        value: pageNumber\n      });\n      i++;\n    }\n\n    return pages;\n  }\n  /**\r\n   * Given the position in the sequence of pagination links [i],\r\n   * figure out what page number corresponds to that position.\r\n   */\n\n\n  calculatePageNumber(i, currentPage, paginationRange, totalPages) {\n    let halfWay = Math.ceil(paginationRange / 2);\n\n    if (i === paginationRange) {\n      return totalPages;\n    } else if (i === 1) {\n      return i;\n    } else if (paginationRange < totalPages) {\n      if (totalPages - halfWay < currentPage) {\n        return totalPages - paginationRange + i;\n      } else if (halfWay < currentPage) {\n        return currentPage - halfWay + i;\n      } else {\n        return i;\n      }\n    } else {\n      return i;\n    }\n  }\n\n}\n\nPaginationControlsDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: PaginationControlsDirective,\n  deps: [{\n    token: PaginationService\n  }, {\n    token: i0.ChangeDetectorRef\n  }],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nPaginationControlsDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: PaginationControlsDirective,\n  selectors: [[\"pagination-template\"], [\"\", \"pagination-template\", \"\"]],\n  inputs: {\n    id: \"id\",\n    maxSize: \"maxSize\"\n  },\n  outputs: {\n    pageChange: \"pageChange\",\n    pageBoundsCorrection: \"pageBoundsCorrection\"\n  },\n  exportAs: [\"paginationApi\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: PaginationControlsDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: 'pagination-template,[pagination-template]',\n      exportAs: 'paginationApi'\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: PaginationService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  },\n  propDecorators: {\n    id: [{\n      type: Input\n    }],\n    maxSize: [{\n      type: Input\n    }],\n    pageChange: [{\n      type: Output\n    }],\n    pageBoundsCorrection: [{\n      type: Output\n    }]\n  }\n});\n\nfunction coerceToBoolean(input) {\n  return !!input && input !== 'false';\n}\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\n\n\nclass PaginationControlsComponent {\n  constructor() {\n    this.maxSize = 7;\n    this.previousLabel = 'Previous';\n    this.nextLabel = 'Next';\n    this.screenReaderPaginationLabel = 'Pagination';\n    this.screenReaderPageLabel = 'page';\n    this.screenReaderCurrentLabel = `You're on page`;\n    this.pageChange = new EventEmitter();\n    this.pageBoundsCorrection = new EventEmitter();\n    this._directionLinks = true;\n    this._autoHide = false;\n    this._responsive = false;\n  }\n\n  get directionLinks() {\n    return this._directionLinks;\n  }\n\n  set directionLinks(value) {\n    this._directionLinks = coerceToBoolean(value);\n  }\n\n  get autoHide() {\n    return this._autoHide;\n  }\n\n  set autoHide(value) {\n    this._autoHide = coerceToBoolean(value);\n  }\n\n  get responsive() {\n    return this._responsive;\n  }\n\n  set responsive(value) {\n    this._responsive = coerceToBoolean(value);\n  }\n\n  trackByIndex(index) {\n    return index;\n  }\n\n}\n\nPaginationControlsComponent.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: PaginationControlsComponent,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.Component\n});\nPaginationControlsComponent.ɵcmp = i0.ɵɵdefineComponent({\n  type: PaginationControlsComponent,\n  selectors: [[\"pagination-controls\"]],\n  inputs: {\n    id: \"id\",\n    maxSize: \"maxSize\",\n    directionLinks: \"directionLinks\",\n    autoHide: \"autoHide\",\n    responsive: \"responsive\",\n    previousLabel: \"previousLabel\",\n    nextLabel: \"nextLabel\",\n    screenReaderPaginationLabel: \"screenReaderPaginationLabel\",\n    screenReaderPageLabel: \"screenReaderPageLabel\",\n    screenReaderCurrentLabel: \"screenReaderCurrentLabel\"\n  },\n  outputs: {\n    pageChange: \"pageChange\",\n    pageBoundsCorrection: \"pageBoundsCorrection\"\n  },\n  decls: 4,\n  vars: 4,\n  consts: [[3, \"id\", \"maxSize\", \"pageChange\", \"pageBoundsCorrection\"], [\"p\", \"paginationApi\"], [\"role\", \"navigation\"], [\"class\", \"ngx-pagination\", 3, \"responsive\", 4, \"ngIf\"], [1, \"ngx-pagination\"], [\"class\", \"pagination-previous\", 3, \"disabled\", 4, \"ngIf\"], [1, \"small-screen\"], [3, \"current\", \"ellipsis\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"class\", \"pagination-next\", 3, \"disabled\", 4, \"ngIf\"], [1, \"pagination-previous\"], [\"tabindex\", \"0\", 3, \"keyup.enter\", \"click\", 4, \"ngIf\"], [\"aria-disabled\", \"true\", 4, \"ngIf\"], [\"tabindex\", \"0\", 3, \"keyup.enter\", \"click\"], [1, \"show-for-sr\"], [\"aria-disabled\", \"true\"], [4, \"ngIf\"], [\"aria-live\", \"polite\"], [1, \"pagination-next\"]],\n  template: function PaginationControlsComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"pagination-template\", 0, 1);\n      i0.ɵɵlistener(\"pageChange\", function PaginationControlsComponent_Template_pagination_template_pageChange_0_listener($event) {\n        return ctx.pageChange.emit($event);\n      })(\"pageBoundsCorrection\", function PaginationControlsComponent_Template_pagination_template_pageBoundsCorrection_0_listener($event) {\n        return ctx.pageBoundsCorrection.emit($event);\n      });\n      i0.ɵɵelementStart(2, \"nav\", 2);\n      i0.ɵɵtemplate(3, PaginationControlsComponent_ul_3_Template, 6, 8, \"ul\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n\n      i0.ɵɵproperty(\"id\", ctx.id)(\"maxSize\", ctx.maxSize);\n      i0.ɵɵadvance(2);\n      i0.ɵɵattribute(\"aria-label\", ctx.screenReaderPaginationLabel);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", !(ctx.autoHide && _r0.pages.length <= 1));\n    }\n  },\n  directives: [PaginationControlsDirective, i2.NgIf, i2.NgForOf],\n  pipes: [i2.DecimalPipe],\n  styles: [\".ngx-pagination{margin-left:0;margin-bottom:1rem}.ngx-pagination:before,.ngx-pagination:after{content:\\\" \\\";display:table}.ngx-pagination:after{clear:both}.ngx-pagination li{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;margin-right:.0625rem;border-radius:0}.ngx-pagination li{display:inline-block}.ngx-pagination a,.ngx-pagination button{color:#0a0a0a;display:block;padding:.1875rem .625rem;border-radius:0}.ngx-pagination a:hover,.ngx-pagination button:hover{background:#e6e6e6}.ngx-pagination .current{padding:.1875rem .625rem;background:#2199e8;color:#fefefe;cursor:default}.ngx-pagination .disabled{padding:.1875rem .625rem;color:#cacaca;cursor:default}.ngx-pagination .disabled:hover{background:transparent}.ngx-pagination a,.ngx-pagination button{cursor:pointer}.ngx-pagination .pagination-previous a:before,.ngx-pagination .pagination-previous.disabled:before{content:\\\"\\\\ab\\\";display:inline-block;margin-right:.5rem}.ngx-pagination .pagination-next a:after,.ngx-pagination .pagination-next.disabled:after{content:\\\"\\\\bb\\\";display:inline-block;margin-left:.5rem}.ngx-pagination .show-for-sr{position:absolute!important;width:1px;height:1px;overflow:hidden;clip:rect(0,0,0,0)}.ngx-pagination .small-screen{display:none}@media screen and (max-width: 601px){.ngx-pagination.responsive .small-screen{display:inline-block}.ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next){display:none}}\\n\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: PaginationControlsComponent,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'pagination-controls',\n      template: DEFAULT_TEMPLATE,\n      styles: [DEFAULT_STYLES],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }],\n  propDecorators: {\n    id: [{\n      type: Input\n    }],\n    maxSize: [{\n      type: Input\n    }],\n    directionLinks: [{\n      type: Input\n    }],\n    autoHide: [{\n      type: Input\n    }],\n    responsive: [{\n      type: Input\n    }],\n    previousLabel: [{\n      type: Input\n    }],\n    nextLabel: [{\n      type: Input\n    }],\n    screenReaderPaginationLabel: [{\n      type: Input\n    }],\n    screenReaderPageLabel: [{\n      type: Input\n    }],\n    screenReaderCurrentLabel: [{\n      type: Input\n    }],\n    pageChange: [{\n      type: Output\n    }],\n    pageBoundsCorrection: [{\n      type: Output\n    }]\n  }\n});\n\nclass NgxPaginationModule {}\n\nNgxPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: NgxPaginationModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nNgxPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: NgxPaginationModule,\n  declarations: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective],\n  imports: [CommonModule],\n  exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\n});\nNgxPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: NgxPaginationModule,\n  providers: [PaginationService],\n  imports: [[CommonModule]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"13.3.9\",\n  ngImport: i0,\n  type: NgxPaginationModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective],\n      providers: [PaginationService],\n      exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\n    }]\n  }]\n});\n/*\r\n * Public API Surface of ngx-pagination\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { NgxPaginationModule, PaginatePipe, PaginationControlsComponent, PaginationControlsDirective, PaginationService };","map":{"version":3,"sources":["../../../projects/ngx-pagination/src/lib/pagination.service.ts","../../../projects/ngx-pagination/src/lib/paginate.pipe.ts","../../../projects/ngx-pagination/src/lib/template.ts","../../../projects/ngx-pagination/src/lib/pagination-controls.directive.ts","../../../projects/ngx-pagination/src/lib/pagination-controls.component.ts","../../../projects/ngx-pagination/src/lib/ngx-pagination.module.ts","../../../projects/ngx-pagination/src/public-api.ts","../../../projects/ngx-pagination/src/ngx-pagination.ts"],"names":[],"mappings":";;;;;;;;;MIiBwC,2B;MAAA;QAAA;QAAA;;AAAA,kB,EAAA;;AAAA,aAAA,cAAA;AAAA;QAAA;QAAA;;AAAA,kB,EAAA;;AAAA,aAAA,cAAA;AAAA,M;MAAA,U;MAAA,8B;MAAA,U;MAAA,e;MAAA,e;;;;;MAAA,a;MAAA,mD;MAAA,a;MAAA,gD;;;;;;MAAA,8B;MAAA,U;MAAA,8B;MAAA,U;MAAA,e;MAAA,e;;;;;MAAA,a;MAAA,mD;MAAA,a;MAAA,gD;;;;;;MAAA,2B;MAAA,iF;MAAA,uF;MAAA,e;;;;;;;;MAAA,2C;MAAA,a;MAAA,yC;MAAA,a;MAAA,sC;;;;;;;;MAAA,2B;MAAA;QAAA;AAAA,uB,EAAA;QAAA;;AAAA,kB,EAAA;;AAAA,aAAA,8BAAA;AAAA;QAAA;AAAA,uB,EAAA;QAAA;;AAAA,kB,EAAA;;AAAA,aAAA,8BAAA;AAAA,M;MAAA,8B;MAAA,U;MAAA,e;MAAA,0B;MAAA,U;;MAAA,e;MAAA,e;;;;;;MAAA,a;MAAA,2D;MAAA,a;MAAA,+D,EAAA,uC;;;;;;MAAA,2B;MAAA,8B;MAAA,8B;MAAA,U;MAAA,e;MAAA,0B;MAAA,U;;MAAA,e;MAAA,e;MAAA,wB;;;;;;MAAA,a;MAAA,8D;MAAA,a;MAAA,+D,EAAA,uC;;;;;;MAAA,wB;MAAA,iF;MAAA,uG;MAAA,e;;;;;;;;;MAAA,kG;MAAA,a;MAAA,wD;MAAA,a;MAAA,wD;;;;;;;;MAAA,2B;MAAA;QAAA;QAAA;;AAAA,kB,EAAA;;AAAA,aAAA,UAAA;AAAA;QAAA;QAAA;;AAAA,kB,EAAA;;AAAA,aAAA,UAAA;AAAA,M;MAAA,U;MAAA,8B;MAAA,U;MAAA,e;MAAA,e;;;;;MAAA,a;MAAA,gD;MAAA,a;MAAA,iD;;;;;;MAAA,8B;MAAA,U;MAAA,8B;MAAA,U;MAAA,e;MAAA,e;;;;;MAAA,a;MAAA,gD;MAAA,a;MAAA,iD;;;;;;MAAA,4B;MAAA,iF;MAAA,uF;MAAA,e;;;;;;;;MAAA,0C;MAAA,a;MAAA,sC;MAAA,a;MAAA,qC;;;;;;MAAA,2B;MAAA,6E;MAAA,2B;MAAA,U;MAAA,e;MAAA,6E;MAAA,6E;MAAA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","sourcesContent":["import {EventEmitter} from '@angular/core'\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nexport class PaginationService {\r\n\r\n    public change: EventEmitter<string> = new EventEmitter<string>();\r\n\r\n    private instances: { [id: string]: PaginationInstance } = {};\r\n    private DEFAULT_ID = 'DEFAULT_PAGINATION_ID';\r\n\r\n    public defaultId(): string { return this.DEFAULT_ID }\r\n\r\n    /**\r\n     * Register a PaginationInstance with this service. Returns a\r\n     * boolean value signifying whether the instance is new or\r\n     * updated (true = new or updated, false = unchanged).\r\n     */\r\n    public register(instance: PaginationInstance): boolean {\r\n        if (instance.id == null) {\r\n            instance.id = this.DEFAULT_ID;\r\n        }\r\n\r\n        if (!this.instances[instance.id]) {\r\n            this.instances[instance.id] = instance;\r\n            return true;\r\n        } else {\r\n            return this.updateInstance(instance);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check each property of the instance and update any that have changed. Return\r\n     * true if any changes were made, else return false.\r\n     */\r\n    private updateInstance(instance: PaginationInstance): boolean {\r\n        let changed = false;\r\n        for (let prop in this.instances[instance.id]) {\r\n            if (instance[prop] !== this.instances[instance.id][prop]) {\r\n                this.instances[instance.id][prop] = instance[prop];\r\n                changed = true;\r\n            }\r\n        }\r\n        return changed;\r\n    }\r\n\r\n    /**\r\n     * Returns the current page number.\r\n     */\r\n    public getCurrentPage(id: string): number {\r\n        if (this.instances[id]) {\r\n            return this.instances[id].currentPage;\r\n        }\r\n        return 1;\r\n    }\r\n\r\n    /**\r\n     * Sets the current page number.\r\n     */\r\n    public setCurrentPage(id: string, page: number) {\r\n        if (this.instances[id]) {\r\n            let instance = this.instances[id];\r\n            let maxPage = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n            if (page <= maxPage && 1 <= page) {\r\n                this.instances[id].currentPage = page;\r\n                this.change.emit(id);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.totalItems\r\n     */\r\n    public setTotalItems(id: string, totalItems: number) {\r\n        if (this.instances[id] && 0 <= totalItems) {\r\n            this.instances[id].totalItems = totalItems;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the value of instance.itemsPerPage.\r\n     */\r\n    public setItemsPerPage(id: string, itemsPerPage: number) {\r\n        if (this.instances[id]) {\r\n            this.instances[id].itemsPerPage = itemsPerPage;\r\n            this.change.emit(id);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns a clone of the pagination instance object matching the id. If no\r\n     * id specified, returns the instance corresponding to the default id.\r\n     */\r\n    public getInstance(id: string = this.DEFAULT_ID): PaginationInstance {\r\n        if (this.instances[id]) {\r\n            return this.clone(this.instances[id]);\r\n        }\r\n        return {} as PaginationInstance;\r\n    }\r\n\r\n    /**\r\n     * Perform a shallow clone of an object.\r\n     */\r\n    private clone(obj: any): any {\r\n        var target = {};\r\n        for (var i in obj) {\r\n            if (obj.hasOwnProperty(i)) {\r\n                target[i] = obj[i];\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n}\r\n","import {Pipe} from \"@angular/core\";\r\nimport {PaginationService} from \"./pagination.service\";\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nconst LARGE_NUMBER = Number.MAX_SAFE_INTEGER;\r\n\r\nexport type Collection<T> = T[] | ReadonlyArray<T>;\r\n\r\nexport interface PaginatePipeArgs {\r\n    id?: string;\r\n    itemsPerPage?: string | number;\r\n    currentPage?: string | number;\r\n    totalItems?: string | number;\r\n}\r\n\r\nexport interface PipeState {\r\n    collection: ArrayLike<any>;\r\n    size: number;\r\n    start: number;\r\n    end: number;\r\n    slice: ArrayLike<any>;\r\n}\r\n\r\n@Pipe({\r\n    name: 'paginate',\r\n    pure: false\r\n})\r\nexport class PaginatePipe {\r\n\r\n    // store the values from the last time the pipe was invoked\r\n    private state: { [id: string]: PipeState } = {};\r\n\r\n    constructor(private service: PaginationService) {\r\n    }\r\n\r\n    public transform<T, U extends Collection<T>>(collection: U, args: PaginatePipeArgs): U {\r\n\r\n        // When an observable is passed through the AsyncPipe, it will output\r\n        // `null` until the subscription resolves. In this case, we want to\r\n        // use the cached data from the `state` object to prevent the NgFor\r\n        // from flashing empty until the real values arrive.\r\n        if (!(collection instanceof Array)) {\r\n            let _id = args.id || this.service.defaultId();\r\n            if (this.state[_id]) {\r\n                return this.state[_id].slice as U;\r\n            } else {\r\n                return collection;\r\n            }\r\n        }\r\n\r\n        let serverSideMode = args.totalItems && args.totalItems !== collection.length;\r\n        let instance = this.createInstance(collection, args);\r\n        let id = instance.id;\r\n        let start, end;\r\n        let perPage = instance.itemsPerPage;\r\n\r\n        let emitChange = this.service.register(instance);\r\n\r\n        if (!serverSideMode && collection instanceof Array) {\r\n            perPage = +perPage || LARGE_NUMBER;\r\n            start = (instance.currentPage - 1) * perPage;\r\n            end = start + perPage;\r\n\r\n            let isIdentical = this.stateIsIdentical(id, collection, start, end);\r\n            if (isIdentical) {\r\n                return this.state[id].slice as U;\r\n            } else {\r\n                let slice = collection.slice(start, end);\r\n                this.saveState(id, collection, slice, start, end);\r\n                this.service.change.emit(id);\r\n                return slice as U;\r\n            }\r\n        } else {\r\n            if (emitChange) {\r\n                this.service.change.emit(id);\r\n            }\r\n\r\n            // save the state for server-side collection to avoid null\r\n            // flash as new data loads.\r\n            this.saveState(id, collection, collection, start, end);\r\n\r\n            return collection;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create an PaginationInstance object, using defaults for any optional properties not supplied.\r\n     */\r\n    private createInstance(collection: readonly any[], config: PaginatePipeArgs): PaginationInstance {\r\n        this.checkConfig(config);\r\n\r\n        return {\r\n            id: config.id != null ? config.id : this.service.defaultId(),\r\n            itemsPerPage: +config.itemsPerPage || 0,\r\n            currentPage: +config.currentPage || 1,\r\n            totalItems: +config.totalItems || collection.length\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Ensure the argument passed to the filter contains the required properties.\r\n     */\r\n    private checkConfig(config: PaginatePipeArgs): void {\r\n        const required = ['itemsPerPage', 'currentPage'];\r\n\r\n        const missing = required.filter(prop => !(prop in config));\r\n        if (0 < missing.length) {\r\n            throw new Error(`PaginatePipe: Argument is missing the following required properties: ${missing.join(', ')}`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * To avoid returning a brand new array each time the pipe is run, we store the state of the sliced\r\n     * array for a given id. This means that the next time the pipe is run on this collection & id, we just\r\n     * need to check that the collection, start and end points are all identical, and if so, return the\r\n     * last sliced array.\r\n     */\r\n    private saveState(id: string, collection: ArrayLike<any>, slice: ArrayLike<any>, start: number, end: number) {\r\n        this.state[id] = {\r\n            collection,\r\n            size: collection.length,\r\n            slice,\r\n            start,\r\n            end\r\n        };\r\n    }\r\n\r\n    /**\r\n     * For a given id, returns true if the collection, size, start and end values are identical.\r\n     */\r\n    private stateIsIdentical(id: string, collection: ArrayLike<any>, start: number, end: number): boolean {\r\n        let state = this.state[id];\r\n        if (!state) {\r\n            return false;\r\n        }\r\n        let isMetaDataIdentical = state.size === collection.length &&\r\n            state.start === start &&\r\n            state.end === end;\r\n\r\n        if(!isMetaDataIdentical) {\r\n            return false;\r\n        }\r\n\r\n        return (state.slice as Array<any>).every((element, index) => element === collection[start + index]);\r\n    }\r\n}\r\n","/**\r\n * The default template and styles for the pagination links are borrowed directly\r\n * from Zurb Foundation 6: http://foundation.zurb.com/sites/docs/pagination.html\r\n */\r\n\r\nexport const DEFAULT_TEMPLATE = `\r\n    <pagination-template  #p=\"paginationApi\"\r\n                         [id]=\"id\"\r\n                         [maxSize]=\"maxSize\"\r\n                         (pageChange)=\"pageChange.emit($event)\"\r\n                         (pageBoundsCorrection)=\"pageBoundsCorrection.emit($event)\">\r\n    <nav role=\"navigation\" [attr.aria-label]=\"screenReaderPaginationLabel\">\r\n    <ul class=\"ngx-pagination\" \r\n        [class.responsive]=\"responsive\"\r\n        *ngIf=\"!(autoHide && p.pages.length <= 1)\">\r\n\r\n        <li class=\"pagination-previous\" [class.disabled]=\"p.isFirstPage()\" *ngIf=\"directionLinks\"> \r\n            <a tabindex=\"0\" *ngIf=\"1 < p.getCurrent()\" (keyup.enter)=\"p.previous()\" (click)=\"p.previous()\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isFirstPage()\" aria-disabled=\"true\">\r\n                {{ previousLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li> \r\n\r\n        <li class=\"small-screen\">\r\n            {{ p.getCurrent() }} / {{ p.getLastPage() }}\r\n        </li>\r\n\r\n        <li [class.current]=\"p.getCurrent() === page.value\" \r\n            [class.ellipsis]=\"page.label === '...'\"\r\n            *ngFor=\"let page of p.pages; trackBy: trackByIndex\">\r\n            <a tabindex=\"0\" (keyup.enter)=\"p.setCurrent(page.value)\" (click)=\"p.setCurrent(page.value)\" *ngIf=\"p.getCurrent() !== page.value\">\r\n                <span class=\"show-for-sr\">{{ screenReaderPageLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span>\r\n            </a>\r\n            <ng-container *ngIf=\"p.getCurrent() === page.value\">\r\n              <span aria-live=\"polite\">\r\n                <span class=\"show-for-sr\">{{ screenReaderCurrentLabel }} </span>\r\n                <span>{{ (page.label === '...') ? page.label : (page.label | number:'') }}</span> \r\n              </span>\r\n            </ng-container>\r\n        </li>\r\n\r\n        <li class=\"pagination-next\" [class.disabled]=\"p.isLastPage()\" *ngIf=\"directionLinks\">\r\n            <a tabindex=\"0\" *ngIf=\"!p.isLastPage()\" (keyup.enter)=\"p.next()\" (click)=\"p.next()\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </a>\r\n            <span *ngIf=\"p.isLastPage()\" aria-disabled=\"true\">\r\n                 {{ nextLabel }} <span class=\"show-for-sr\">{{ screenReaderPageLabel }}</span>\r\n            </span>\r\n        </li>\r\n\r\n    </ul>\r\n    </nav>\r\n    </pagination-template>\r\n    `;\r\n\r\nexport const DEFAULT_STYLES = `\r\n.ngx-pagination {\r\n  margin-left: 0;\r\n  margin-bottom: 1rem; }\r\n  .ngx-pagination::before, .ngx-pagination::after {\r\n    content: ' ';\r\n    display: table; }\r\n  .ngx-pagination::after {\r\n    clear: both; }\r\n  .ngx-pagination li {\r\n    -moz-user-select: none;\r\n    -webkit-user-select: none;\r\n    -ms-user-select: none;\r\n    margin-right: 0.0625rem;\r\n    border-radius: 0; }\r\n  .ngx-pagination li {\r\n    display: inline-block; }\r\n  .ngx-pagination a,\r\n  .ngx-pagination button {\r\n    color: #0a0a0a; \r\n    display: block;\r\n    padding: 0.1875rem 0.625rem;\r\n    border-radius: 0; }\r\n    .ngx-pagination a:hover,\r\n    .ngx-pagination button:hover {\r\n      background: #e6e6e6; }\r\n  .ngx-pagination .current {\r\n    padding: 0.1875rem 0.625rem;\r\n    background: #2199e8;\r\n    color: #fefefe;\r\n    cursor: default; }\r\n  .ngx-pagination .disabled {\r\n    padding: 0.1875rem 0.625rem;\r\n    color: #cacaca;\r\n    cursor: default; } \r\n    .ngx-pagination .disabled:hover {\r\n      background: transparent; }\r\n  .ngx-pagination a, .ngx-pagination button {\r\n    cursor: pointer; }\r\n\r\n.ngx-pagination .pagination-previous a::before,\r\n.ngx-pagination .pagination-previous.disabled::before { \r\n  content: '«';\r\n  display: inline-block;\r\n  margin-right: 0.5rem; }\r\n\r\n.ngx-pagination .pagination-next a::after,\r\n.ngx-pagination .pagination-next.disabled::after {\r\n  content: '»';\r\n  display: inline-block;\r\n  margin-left: 0.5rem; }\r\n\r\n.ngx-pagination .show-for-sr {\r\n  position: absolute !important;\r\n  width: 1px;\r\n  height: 1px;\r\n  overflow: hidden;\r\n  clip: rect(0, 0, 0, 0); }\r\n.ngx-pagination .small-screen {\r\n  display: none; }\r\n@media screen and (max-width: 601px) {\r\n  .ngx-pagination.responsive .small-screen {\r\n    display: inline-block; } \r\n  .ngx-pagination.responsive li:not(.small-screen):not(.pagination-previous):not(.pagination-next) {\r\n    display: none; }\r\n}\r\n  `;\r\n","import {ChangeDetectorRef, Directive, EventEmitter, Input, Output} from '@angular/core';\r\nimport {Subscription} from 'rxjs';\r\n\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationInstance} from './pagination-instance';\r\n\r\nexport interface Page {\r\n    label: string;\r\n    value: any;\r\n}\r\n\r\n/**\r\n * This directive is what powers all pagination controls components, including the default one.\r\n * It exposes an API which is hooked up to the PaginationService to keep the PaginatePipe in sync\r\n * with the pagination controls.\r\n */\r\n@Directive({\r\n    selector: 'pagination-template,[pagination-template]',\r\n    exportAs: 'paginationApi'\r\n})\r\nexport class PaginationControlsDirective {\r\n    @Input() id: string;\r\n    @Input() maxSize: number = 7;\r\n    @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n    @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter<number>();\r\n    pages: Page[] = [];\r\n\r\n    private changeSub: Subscription;\r\n\r\n    constructor(private service: PaginationService,\r\n                private changeDetectorRef: ChangeDetectorRef) {\r\n        this.changeSub = this.service.change\r\n            .subscribe(id => {\r\n                if (this.id === id) {\r\n                    this.updatePageLinks();\r\n                    this.changeDetectorRef.markForCheck();\r\n                    this.changeDetectorRef.detectChanges();\r\n                }\r\n            });\r\n    }\r\n\r\n    ngOnInit() {\r\n        if (this.id === undefined) {\r\n            this.id = this.service.defaultId();\r\n        }\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    ngOnChanges(changes: any) {\r\n        this.updatePageLinks();\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.changeSub.unsubscribe();\r\n    }\r\n\r\n    /**\r\n     * Go to the previous page\r\n     */\r\n    previous() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() - 1);\r\n    }\r\n\r\n    /**\r\n     * Go to the next page\r\n     */\r\n    next() {\r\n        this.checkValidId();\r\n        this.setCurrent(this.getCurrent() + 1);\r\n    }\r\n\r\n    /**\r\n     * Returns true if current page is first page\r\n     */\r\n    isFirstPage(): boolean {\r\n        return this.getCurrent() === 1;\r\n    }\r\n\r\n    /**\r\n     * Returns true if current page is last page\r\n     */\r\n    isLastPage(): boolean {\r\n        return this.getLastPage() === this.getCurrent();\r\n    }\r\n\r\n    /**\r\n     * Set the current page number.\r\n     */\r\n    setCurrent(page: number) {\r\n        this.pageChange.emit(page);\r\n    }\r\n\r\n    /**\r\n     * Get the current page number.\r\n     */\r\n    getCurrent(): number {\r\n        return this.service.getCurrentPage(this.id);\r\n    }\r\n\r\n    /**\r\n     * Returns the last page number\r\n     */\r\n    getLastPage(): number {\r\n        let inst = this.service.getInstance(this.id);\r\n        if (inst.totalItems < 1) {\r\n            // when there are 0 or fewer (an error case) items, there are no \"pages\" as such,\r\n            // but it makes sense to consider a single, empty page as the last page.\r\n            return 1;\r\n        }\r\n        return Math.ceil(inst.totalItems / inst.itemsPerPage);\r\n    }\r\n\r\n    getTotalItems(): number {\r\n        return this.service.getInstance(this.id).totalItems;\r\n    }\r\n\r\n    private checkValidId() {\r\n        if (this.service.getInstance(this.id).id == null) {\r\n            console.warn(`PaginationControlsDirective: the specified id \"${this.id}\" does not match any registered PaginationInstance`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Updates the page links and checks that the current page is valid. Should run whenever the\r\n     * PaginationService.change stream emits a value matching the current ID, or when any of the\r\n     * input values changes.\r\n     */\r\n    private updatePageLinks() {\r\n        let inst = this.service.getInstance(this.id);\r\n        const correctedCurrentPage = this.outOfBoundCorrection(inst);\r\n\r\n        if (correctedCurrentPage !== inst.currentPage) {\r\n            setTimeout(() => {\r\n                this.pageBoundsCorrection.emit(correctedCurrentPage);\r\n                this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n            });\r\n        } else {\r\n            this.pages = this.createPageArray(inst.currentPage, inst.itemsPerPage, inst.totalItems, this.maxSize);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks that the instance.currentPage property is within bounds for the current page range.\r\n     * If not, return a correct value for currentPage, or the current value if OK.\r\n     */\r\n    private outOfBoundCorrection(instance: PaginationInstance): number {\r\n        const totalPages = Math.ceil(instance.totalItems / instance.itemsPerPage);\r\n        if (totalPages < instance.currentPage && 0 < totalPages) {\r\n            return totalPages;\r\n        } else if (instance.currentPage < 1) {\r\n            return 1;\r\n        }\r\n\r\n        return instance.currentPage;\r\n    }\r\n\r\n    /**\r\n     * Returns an array of Page objects to use in the pagination controls.\r\n     */\r\n    private createPageArray(currentPage: number, itemsPerPage: number, totalItems: number, paginationRange: number): Page[] {\r\n        // paginationRange could be a string if passed from attribute, so cast to number.\r\n        paginationRange = +paginationRange;\r\n        let pages = [];\r\n        \r\n        // Return 1 as default page number\r\n        // Make sense to show 1 instead of empty when there are no items\r\n        const totalPages = Math.max(Math.ceil(totalItems / itemsPerPage), 1);\r\n        const halfWay = Math.ceil(paginationRange / 2);\r\n\r\n        const isStart = currentPage <= halfWay;\r\n        const isEnd = totalPages - halfWay < currentPage;\r\n        const isMiddle = !isStart && !isEnd;\r\n\r\n        let ellipsesNeeded = paginationRange < totalPages;\r\n        let i = 1;\r\n\r\n        while (i <= totalPages && i <= paginationRange) {\r\n            let label;\r\n            let pageNumber = this.calculatePageNumber(i, currentPage, paginationRange, totalPages);\r\n            let openingEllipsesNeeded = (i === 2 && (isMiddle || isEnd));\r\n            let closingEllipsesNeeded = (i === paginationRange - 1 && (isMiddle || isStart));\r\n            if (ellipsesNeeded && (openingEllipsesNeeded || closingEllipsesNeeded)) {\r\n                label = '...';\r\n            } else {\r\n                label = pageNumber;\r\n            }\r\n            pages.push({\r\n                label: label,\r\n                value: pageNumber\r\n            });\r\n            i ++;\r\n        }\r\n        return pages;\r\n    }\r\n\r\n    /**\r\n     * Given the position in the sequence of pagination links [i],\r\n     * figure out what page number corresponds to that position.\r\n     */\r\n    private calculatePageNumber(i: number, currentPage: number, paginationRange: number, totalPages: number) {\r\n        let halfWay = Math.ceil(paginationRange / 2);\r\n        if (i === paginationRange) {\r\n            return totalPages;\r\n        } else if (i === 1) {\r\n            return i;\r\n        } else if (paginationRange < totalPages) {\r\n            if (totalPages - halfWay < currentPage) {\r\n                return totalPages - paginationRange + i;\r\n            } else if (halfWay < currentPage) {\r\n                return currentPage - halfWay + i;\r\n            } else {\r\n                return i;\r\n            }\r\n        } else {\r\n            return i;\r\n        }\r\n    }\r\n}\r\n","import {Component, Input, Output, EventEmitter, ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core'\r\nimport {DEFAULT_TEMPLATE, DEFAULT_STYLES} from './template';\r\n\r\nfunction coerceToBoolean(input: string | boolean): boolean {\r\n    return !!input && input !== 'false';\r\n}\r\n\r\n/**\r\n * The default pagination controls component. Actually just a default implementation of a custom template.\r\n */\r\n@Component({\r\n    selector: 'pagination-controls',\r\n    template: DEFAULT_TEMPLATE,\r\n    styles: [DEFAULT_STYLES],\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class PaginationControlsComponent {\r\n\r\n    @Input() id: string;\r\n    @Input() maxSize: number = 7;\r\n    @Input()\r\n    get directionLinks(): boolean {\r\n        return this._directionLinks;\r\n    }\r\n    set directionLinks(value: boolean) {\r\n        this._directionLinks = coerceToBoolean(value);\r\n    }\r\n    @Input()\r\n    get autoHide(): boolean {\r\n        return this._autoHide;\r\n    }\r\n    set autoHide(value: boolean) {\r\n        this._autoHide = coerceToBoolean(value);\r\n    }\r\n    @Input()\r\n    get responsive(): boolean {\r\n        return this._responsive;\r\n    }\r\n    set responsive(value: boolean) {\r\n        this._responsive = coerceToBoolean(value);\r\n    }\r\n    @Input() previousLabel: string = 'Previous';\r\n    @Input() nextLabel: string = 'Next';\r\n    @Input() screenReaderPaginationLabel: string = 'Pagination';\r\n    @Input() screenReaderPageLabel: string = 'page';\r\n    @Input() screenReaderCurrentLabel: string = `You're on page`;\r\n    @Output() pageChange: EventEmitter<number> = new EventEmitter<number>();\r\n    @Output() pageBoundsCorrection: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n    private _directionLinks: boolean = true;\r\n    private _autoHide: boolean = false;\r\n    private _responsive: boolean = false;\r\n\r\n    trackByIndex(index: number) {\r\n        return index;\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {PaginatePipe} from './paginate.pipe';\r\nimport {PaginationService} from './pagination.service';\r\nimport {PaginationControlsComponent} from './pagination-controls.component';\r\nimport {PaginationControlsDirective} from './pagination-controls.directive';\r\n\r\nexport {PaginationInstance} from './pagination-instance';\r\nexport {PaginationService} from './pagination.service';\r\nexport {PaginationControlsComponent} from './pagination-controls.component';\r\nexport {PaginationControlsDirective} from './pagination-controls.directive';\r\nexport {PaginatePipe} from './paginate.pipe';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [\r\n        PaginatePipe,\r\n        PaginationControlsComponent,\r\n        PaginationControlsDirective\r\n    ],\r\n    providers: [PaginationService],\r\n    exports: [PaginatePipe, PaginationControlsComponent, PaginationControlsDirective]\r\n})\r\nexport class NgxPaginationModule { }\r\n","/*\r\n * Public API Surface of ngx-pagination\r\n */\r\n\r\nexport * from './lib/paginate.pipe';\r\nexport * from './lib/pagination.service';\r\nexport * from './lib/pagination-controls.component';\r\nexport * from './lib/pagination-controls.directive';\r\nexport * from './lib/pagination-instance';\r\nexport * from './lib/ngx-pagination.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module"}